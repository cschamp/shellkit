alarm() {
  echo $@ | osd_cat -c green --delay 5 --align center --pos middle --font -b\&h-lucida-bold-r-normal-sans-34-240-100-100-p-216-iso8859-1 &
}

backupHistory() {
  local topBackupDir=~/.zsh_hist
  local backupDir=$topBackupDir/`hostname`
  local backupFileBasename="zsh_history"
  local backupFileBasePath=${backupDir}/${backupFileBasename}
  local backupFile=${backupFileBasePath}-`date --iso-8601=seconds`
  # save a copy
  mkdir -p -m 0700 $topBackupDir
  mkdir -p -m 0700 $backupDir
  cp ~/.zsh_history ${backupFile}
  # now remove all but latest 5
  local -a files
  files=(`find ${backupDir} -name "${backupFileBasename}*" | sort`)
  rm -f $files[1,-6]
}

bak() {
  cp -rP "${1}" "${1}.bak"
}
unbak() {
  cp -rP "${1}" "${1/.bak}"
}

beep() {
 echo -n "\a"
 n=${1:-1}
 if [[ $n -gt 1 ]] ; then
   for i in {2..${n}} ; do
     sleep .5
     echo -n "\a"     
   done
 fi
}

bld() {
  cmd="make -C /usr/local/build/git/hosted09/bora-vmsoft VERBOSE=0 OBJDIR=release $1"
  case `hostname` in
     cschamp-zr1*)
        zsh $cmd 2>&1 |tee $1.log
        ;;
     *)
         ssh ${USER}@cschamp-zr1 $cmd 2>&1 |tee $1.log
        ;;
  esac
}

burn() {
  mkisofs -JR -f "$@" | s cdrecord -v -v driveropts=burnfree gracetime=2 -overburn -eject -
}

burnV() { # burn and md5sum the resulting CD (only for single files)
  mkisofs -JR -f "$1" | s cdrecord -v -v gracetime=2 -
  mount /cdrecorder
  diff "`basename \"$1\"`" /cdrecorder/"$1" > /dev/null && echo "OK" || echo "failed"
  umount /cdrecorder
}

calc() {
  awk 'BEGIN { OFMT="%f"; print '"$*"'}'
}

cdc() {
  mkdir -p "$1" && cd "$1"
}

conv() {
  case $1 in
    f2c) echo "${2}°F is `round $((5*(${2}-32)/9))`°C" ;;
    c2f) echo "${2}°C is `round $((32+9*${2}/5.))`°F" ;;
    p2k) echo "${2}lbs is `round $((${2}*0.454))`kgs" ;;
    k2p) echo "${2}kgs is `round $((${2}/0.454))`lbs" ;;
    cm2i) echo "Not implemented..." ;;
    i2cm) echo "Not implemented..." ;;
  esac
}

convertToU10() {
  inFile="$1"
  outFile=`echo $1 | sed -e 's/\.\([^\.]*\)$/.u10.avi/'`
  mencoder "$inFile" -o "$outFile" -ovc xvid -xvidencopts bitrate=384:max_bframes=0 -oac mp3lame -lameopts mode=2:cbr:br=128 -vf scale=320:240,expand=320:240,harddup -ofps 15.0 -srate 44100 -ffourcc XVID
}

connect() { # pops an ssh windows if under x, or simple ssh if not
  local host=$1 && shift
  [[ -n "$1" ]] && local port="-p $1" && shift
  if [[ -z "$@" ]] ; then
    xpop "ssh -Y $port $host" "$host" -g 150x54
  else
    xpop "ssh -Y $port $host" "$host" "$@"
  fi      
}

cp-other() {
  tar cf - "$1" | (cd $2 ; tar xfp -)
}

debian-doc() {
  zmore /usr/share/doc/$1/$2
}

divx2dvd() {
  local divxFile=$1
  local tmpBase=tmp
  local tmpAudio="${tmpBase}.ac3"
  local tmpVideo="${tmpBase}.m2v"
  transcode -y ffmpeg --export_prof dvd-ntsc --export_asr 3 -D0 -s2 -m "$tmpAudio" -J modfps=clonetype=3 --export_fps 29.97 -i "$divxFile" -o "$tmpBase"
  mplex -f8 -o "${divxFile}.dvd.mpg" "$tmpVideo" "$tmpAudio"
  \rm -f "$tmpVideo" "$tmpAudio"
}

e() {
  emacs $@ &
}

e-clean() {
  local dir=${1:-.}
  local files
  files=(${dir}/**/*~(DN) ${dir}/**/*.pyc(N) ${dir}/**/(.|)'#'*(N))
  (( $#files > 0 )) && /bin/rm -f $files
}

eas() { # Edit And Source
  ${EDITOR_ZSH} "$1" && source "$1"
}

#evaluate-command() {
#  local command=$1
#  if what $command | grep -q "function" ; then
#    echo "$command is a shell function, aborting..."
#  else
#    echo `whence $command`
#  fi
#}

evaluate-command() { 
  # If param is a function, returns the array:
  #    ( "param() { actualDefinition }", param )
  # else, return an array containing the command + options, for instance
  #    ( ls -F --color )
  # The result is returned via $reply
  local command=$1
  if whence -v $command | grep -q "function" ; then
    # join function def. lines with ' ;'
    functionDef=${(pj: ;:)${(f)"$(whence -f $command)"}}
    # add a call to that function in the end
    reply="$functionDef ; $command"
  elif whence $command > /dev/null ; then # alias or command in PATH: put all elements in an array
    set -A reply `whence $command`
  elif \ls -l $command 2> /dev/null | egrep -q '^-..x' ; then # binary
    set -A reply $command
  else # not found
    return 1
  fi
}

#find() { # filter out .svn
#  dir=${1:-.}
#  [ $# -gt 0 ] && shift
#  local printArg
#  [[ "$@" == *-print* ]] || printArg="-print" 
#  command find "$dir" -path '*/.svn' -prune -o $@ $printArg
#}

g() {
 elinks "www.google.com/?q=$@"
}

gg() {
  # googlegrep
  #
  # gg [-c] foo bar
  # 
  # greps for foo in all pages that google found for bar 
  
  local cache="|cache"
  if [ "$1" == "-c" ] ; then
    cache=""
    shift
  fi
  lynx -dump http://www.google.com/search?q="$2" | \
  egrep "http.*" | egrep -iv "google$cache" | nth 2 | \
  while read f ; do
    echo -n "."
    curl -s --connect-timeout 10 "$f" | grep -iq "$1" && echo -e "\n$f matches"
  done
}

grepz() {
  grep -H "$@" $ZSH_CONFIG_FILES
}

have() {
  whence $1 > /dev/null
}

haveNetwork() {
  case $OSTYPE in
    solaris*|darwin*|*bsd*) # FIXME!
      return 0 ;;
    linux*)
      ifconfig | grep -A 1 -E '^(eth|tun)' | grep -q 'inet' ;;
#      return $? ;;
  esac
}

i() { # install package $1
  case $OSTYPE in
    openbsd*)
      s pkg_add -v $@ ;;
    linux-gnu)
      s apt-get install $@ ;;
    *)
      echo "Platform $OSTYPE not supported" ;;
  esac
  rehash
}

ip() { # prints current IP (linux only)
  ifconfig ${1:-eth0} | perl -nle 'print $1 if (m/inet addr:(.*?)\s/)'
}

keychain-init() {
  SH_FILE="$HOME/.keychain/${HOST}-sh"
  if [ -f $SH_FILE ] ; then
    source $SH_FILE
  fi
  for key in ~/.ssh/*.[dr]sa ; do
    keychain --nogui --quiet --nocolor $key
  done
  source $SH_FILE
}

lsd() {
  ll -d ${1}*(/)
}

lst() { # list files by type
  local type=$1
  shift
  if [[ ${+extensions[$type]} -eq 0 ]] ; then
    echo -n "$type is not a supported type. Valid types are: "
    echo ${(k)extensions[@]}
  fi
  local p
  if [[ ${#argv} -eq 0 ]] || [[ $argv[-1] == -** ]] ; then # no path was specified, use .
    p=.
  else
    p="$argv[-1]"
    argv=$argv[1,-2]
  fi
  local matches="`echo "$p"/*.${(s, ,)${extensions[$type]}}(DN)`"
  [[ -n "$matches" ]] && ls $argv "$p"/*.${(s, ,)${extensions[$type]}}(DN)
}

mf() {
  firefox "$1" &
}

mvc() {
  mkdir -p "$argv[-1]" ; mv $@
}

nth () {
  awk "{print \$${1}}"
}

pydoc-html() {
  local html=/usr/share/doc/python2.3-doc/html/lib/module-MODULE.html
  links ${html/MODULE/$1}
}

psg() {
  psall | grep -i "$1" | grep -v "grep -i $1"
}

rgrep() { 
  # recursive grep, bash-compatible (in zsh, a simple grep $1 $2/**/* does it)
  local pattern=$1
  local -a dirs ; dirs=$argv[2,-1]
  [ -z $dirs ] && dirs=.
  local -a grep_opts ; grep_opts=(-i)
  # define rgrepLocal if not already defined
  whence rgrepLocal > /dev/null || case $OSTYPE in
    solaris*) # retarded :\
      rgrepLocal() {
        for f in `find $d2 -type f` ; do
	  grep $grep_opts -q "$1" "$f" && echo ${f}: `grep $grep_opts "$1" "$f"`
        done
      } ;;
    openbsd*)
      rgrepLocal() {
        local -a grep_opts ; grep_opts=($grep_opts -I -o)
        grep -R $grep_opts "$1" "$2"
      } ;;
    *) # assume GNU grep
      rgrepLocal() {
        local -a grep_opts ; grep_opts=($grep_opts -I -H)
        grep -r $grep_opts "$1" "$2"
      } ;;
  esac

  for dir in $dirs ; do
    echo $dir
    rgrepLocal "$pattern" "$dir" | grep -v .svn
  done
}

rmmod() {
  lsmod | grep -E "$1" | awk '{print $1}' | xargs rmmod
}

round() {
  echo "scale=${2:-2};${1}/1" | bc
}

run() { # remotely run
  while getopts c OPTION ; do
    case $OPTION in
      c) local CONSOLE=1 ;;
      *) echo "blah" $OPTION ; return 1 ;;
    esac
  done

  shift $[ $OPTIND - 1 ]

  local host=$1
  local command=$2
  shift ; shift

  if [[ -n "${CONSOLE}" ]] ; then
    ssh -X -t $host $command
  else
    xpop "ssh -t $host \"$command\"" "RemoteExec@$host: $command" $@
  fi
}

s() { # smarter sudo
  local debug=off
  [[ $1 = -d ]] && local debug=on && shift

  opts=()
  if [[ $1 = -* ]] ; then
    while [[ -n $@ ]] && [[ $1 != -- ]] ; do 
      opts+="$1"
      shift
    done
    shift
  fi

  evaluate-command $1 # result is returned in $reply  
  if [[ $? != 0 ]] ; then
    echo "$1 not found"
    return 1
  fi
  shift
  set -A args "\"$@\""
#  set -A command $reply "\"$@\"" # add *quoted* args
#  set -A expandedCommand $reply $~args # expansion on an array
  set -A expandedCommand $reply $args
  unset reply
#  set -A expandedCommand $~command # expansion on an array
  [[ $debug = on ]] && print -l -- "$expandedCommand[@]" && print =================
  sudo $opts zsh -c "$expandedCommand"
}

se() {
  s /etc/init.d/$1 $2 $3
}

setlocale() {
  local locale=$1
  if locale -a | grep -q $locale ; then
    export LANG=$locale
    export LC_ALL=$locale
  else
    echo "$locale is not a valid locale. Try locale -a for available locales."
  fi
}

xpop() { # my precious :)
  set -A commandAndArgs ${=1} # split $1 as if SH_WORD_SPLIT was set
  shift

  local c=$commandAndArgs[0]
  shift 1 commandAndArgs

  evaluate-command $c # result is returned in $reply
  if [[ $? != 0 ]] ; then
    echo "$c not found"
    return 1
  fi
  set -A command $reply "$commandAndArgs[@]" # add args
  set -A expandedCommand $~command # nice trick to do expansion on an array
  unset reply

  local name=$1
  shift

  if [ -n "${DISPLAY}" ] ; then
    ${=XTERM/&/} $@ -n "$name" -T "$name" -e zsh -c "$expandedCommand" &
  else
    zsh -c "$expandedCommand"
  fi
}

ws() {
	case $1 in
	yorktown)
		export P4PORT=yorktown.corp.adobe.com:1700
		export P4CONFIG=${HOME}/.yorktown
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	redcloud)
		export P4PORT=redcloud.corp.adobe.com:1700
		export P4CONFIG=${HOME}/.redcloud
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	redcloud:1820)
		export P4PORT=redcloud.corp.adobe.com:1820
		export P4CONFIG=${HOME}/.redcloud-1820
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	redcloud:1850)
		export P4PORT=redcloud.corp.adobe.com:1850
		export P4CONFIG=${HOME}/.redcloud-1850
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	yorktown:1820)
		export P4PORT=yorktown.corp.adobe.com:1820
		export P4CONFIG=${HOME}/.yorktown-1820
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	langley:1670)
		export P4PORT=langley.corp.adobe.com:1670
		export P4CONFIG=${HOME}/.langley-1670
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	langley:1666)
		export P4PORT=langley.corp.adobe.com:1666
		export P4CONFIG=${HOME}/.langley-1666
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	langley-base)
		export P4PORT=langley.corp.adobe.com:1670
		export P4CONFIG=${HOME}/.langley-base
		DEPOT="${P4PORT/.corp.adobe.com/}"
		;;
	*)
		echo "Unknown workspace: $1"
		cat <<EOF
		Available depots:
			yorktown (1700)
			redcloud (1700)
			redcloud:1820
			redcloud:1850
			yorktown:1820
			langley:1666
			langley:1670
EOF
		;;
	esac
}

cs() {
    [ -z ${P4CONFIG} ] && ws langley-base
    if [  -z "$1" ] ; then
        echo "Please provide a client spec name"
        echo "Client specs for ${USER} are:"
        p4 clients -u ${USER}
    else
        export P4CLIENT=$1
    fi
}

